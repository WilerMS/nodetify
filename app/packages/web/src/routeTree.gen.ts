/* prettier-ignore-start */

/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file is auto-generated by TanStack Router

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as protectedImport } from './routes/(protected)'
import { Route as protectedIndexImport } from './routes/(protected)/index'
import { Route as authRegisterImport } from './routes/(auth)/register'
import { Route as authLoginImport } from './routes/(auth)/login'
import { Route as protectedSettingsIndexImport } from './routes/(protected)/settings/index'
import { Route as protectedNotificationsIndexImport } from './routes/(protected)/notifications/index'
import { Route as protectedDatabasesIndexImport } from './routes/(protected)/databases/index'
import { Route as protectedAlarmsIndexImport } from './routes/(protected)/alarms/index'
import { Route as protectedSupportTutorialsImport } from './routes/(protected)/support/tutorials'
import { Route as protectedSupportDocsImport } from './routes/(protected)/support/docs'
import { Route as protectedSupportContactImport } from './routes/(protected)/support/contact'

// Create/Update Routes

const protectedRoute = protectedImport.update({
  id: '/(protected)',
  getParentRoute: () => rootRoute,
} as any)

const protectedIndexRoute = protectedIndexImport.update({
  path: '/',
  getParentRoute: () => protectedRoute,
} as any)

const authRegisterRoute = authRegisterImport.update({
  path: '/register',
  getParentRoute: () => rootRoute,
} as any)

const authLoginRoute = authLoginImport.update({
  path: '/login',
  getParentRoute: () => rootRoute,
} as any)

const protectedSettingsIndexRoute = protectedSettingsIndexImport.update({
  path: '/settings/',
  getParentRoute: () => protectedRoute,
} as any)

const protectedNotificationsIndexRoute =
  protectedNotificationsIndexImport.update({
    path: '/notifications/',
    getParentRoute: () => protectedRoute,
  } as any)

const protectedDatabasesIndexRoute = protectedDatabasesIndexImport.update({
  path: '/databases/',
  getParentRoute: () => protectedRoute,
} as any)

const protectedAlarmsIndexRoute = protectedAlarmsIndexImport.update({
  path: '/alarms/',
  getParentRoute: () => protectedRoute,
} as any)

const protectedSupportTutorialsRoute = protectedSupportTutorialsImport.update({
  path: '/support/tutorials',
  getParentRoute: () => protectedRoute,
} as any)

const protectedSupportDocsRoute = protectedSupportDocsImport.update({
  path: '/support/docs',
  getParentRoute: () => protectedRoute,
} as any)

const protectedSupportContactRoute = protectedSupportContactImport.update({
  path: '/support/contact',
  getParentRoute: () => protectedRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/(protected)': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof protectedImport
      parentRoute: typeof rootRoute
    }
    '/(auth)/login': {
      id: '/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof authLoginImport
      parentRoute: typeof rootRoute
    }
    '/(auth)/register': {
      id: '/register'
      path: '/register'
      fullPath: '/register'
      preLoaderRoute: typeof authRegisterImport
      parentRoute: typeof rootRoute
    }
    '/(protected)/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof protectedIndexImport
      parentRoute: typeof protectedImport
    }
    '/(protected)/support/contact': {
      id: '/support/contact'
      path: '/support/contact'
      fullPath: '/support/contact'
      preLoaderRoute: typeof protectedSupportContactImport
      parentRoute: typeof protectedImport
    }
    '/(protected)/support/docs': {
      id: '/support/docs'
      path: '/support/docs'
      fullPath: '/support/docs'
      preLoaderRoute: typeof protectedSupportDocsImport
      parentRoute: typeof protectedImport
    }
    '/(protected)/support/tutorials': {
      id: '/support/tutorials'
      path: '/support/tutorials'
      fullPath: '/support/tutorials'
      preLoaderRoute: typeof protectedSupportTutorialsImport
      parentRoute: typeof protectedImport
    }
    '/(protected)/alarms/': {
      id: '/alarms/'
      path: '/alarms'
      fullPath: '/alarms'
      preLoaderRoute: typeof protectedAlarmsIndexImport
      parentRoute: typeof protectedImport
    }
    '/(protected)/databases/': {
      id: '/databases/'
      path: '/databases'
      fullPath: '/databases'
      preLoaderRoute: typeof protectedDatabasesIndexImport
      parentRoute: typeof protectedImport
    }
    '/(protected)/notifications/': {
      id: '/notifications/'
      path: '/notifications'
      fullPath: '/notifications'
      preLoaderRoute: typeof protectedNotificationsIndexImport
      parentRoute: typeof protectedImport
    }
    '/(protected)/settings/': {
      id: '/settings/'
      path: '/settings'
      fullPath: '/settings'
      preLoaderRoute: typeof protectedSettingsIndexImport
      parentRoute: typeof protectedImport
    }
  }
}

// Create and export the route tree

export const routeTree = rootRoute.addChildren({
  protectedRoute: protectedRoute.addChildren({
    protectedIndexRoute,
    protectedSupportContactRoute,
    protectedSupportDocsRoute,
    protectedSupportTutorialsRoute,
    protectedAlarmsIndexRoute,
    protectedDatabasesIndexRoute,
    protectedNotificationsIndexRoute,
    protectedSettingsIndexRoute,
  }),
  authLoginRoute,
  authRegisterRoute,
})

/* prettier-ignore-end */

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/login",
        "/register"
      ]
    },
    "/": {
      "filePath": "(protected)/index.tsx",
      "parent": "/"
    },
    "/login": {
      "filePath": "(auth)/login.tsx"
    },
    "/register": {
      "filePath": "(auth)/register.tsx"
    },
    "/support/contact": {
      "filePath": "(protected)/support/contact.tsx",
      "parent": "/"
    },
    "/support/docs": {
      "filePath": "(protected)/support/docs.tsx",
      "parent": "/"
    },
    "/support/tutorials": {
      "filePath": "(protected)/support/tutorials.tsx",
      "parent": "/"
    },
    "/alarms/": {
      "filePath": "(protected)/alarms/index.tsx",
      "parent": "/"
    },
    "/databases/": {
      "filePath": "(protected)/databases/index.tsx",
      "parent": "/"
    },
    "/notifications/": {
      "filePath": "(protected)/notifications/index.tsx",
      "parent": "/"
    },
    "/settings/": {
      "filePath": "(protected)/settings/index.tsx",
      "parent": "/"
    }
  }
}
ROUTE_MANIFEST_END */
